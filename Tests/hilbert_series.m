/*
Generated with
foo.m:
d := StringToInteger(d);
F := QuadraticField(d);
ZF := Integers(F);
print Sprintf("dimensions[%o] := %o;\n", d, [[Dimension((HilbertCuspForms(F, n*ZF, [k, k]))) : k in [2..16 by 2]]: n in [1..5]]);
exit;

and
parallel --eta magma -b d:={1} foo.m ::: 5 8 12 13 17 21 24 28 29 33 37 40 41 44 53 56 57 60 61 65 69 73 76 77 85 88 89 92 93 97 101 104 105 109 113 120 124 129 133 136 137 140 141 145 149 152 156 157 161 165 168 172 173 177 181 184 185 188 193 197 201 204 205 209 213 217 220 221 229 232 233 236 237 241 248 249 253 257 264 265 268 269 273 277 280 281 284 285 293 296 301 305 309 312 313 316 317 321 328 329 332 337 341 344 345 348 349 353 357 364 365 373 376 377 380 381 385 389 393 397 401 408 409 412 413 417 421 424 428 429 433 437 440 444 445 449 453 456 457 460 461 465 469 472 473 476 481 485 488 489 492 493 497
*/

dimensions := AssociativeArray();

dimensions[17] := [
[ 0, 2, 5, 9, 14, 21, 29, 38 ],
[ 1, 14, 38, 74, 122, 182, 254, 338 ],
[ 2, 16, 43, 83, 136, 203, 283, 376 ],
[ 5, 54, 150, 294, 486, 726, 1014, 1350 ],
[ 5, 40, 110, 214, 352, 526, 734, 976 ]
];

dimensions[8] := [
[ 0, 1, 2, 3, 4, 6, 8, 10 ],
[ 0, 3, 7, 13, 21, 31, 43, 57 ],
[ 1, 5, 12, 22, 35, 52, 72, 95 ],
[ 0, 9, 25, 49, 81, 121, 169, 225 ],
[ 2, 11, 29, 55, 89, 133, 185, 245 ]
];

dimensions[5] := [
[ 0, 0, 1, 1, 2, 3, 3, 4 ],
[ 0, 1, 3, 5, 7, 11, 15, 19 ],
[ 0, 2, 5, 9, 14, 21, 29, 38 ],
[ 0, 3, 9, 17, 27, 41, 57, 75 ],
[ 0, 5, 13, 25, 41, 61, 85, 113 ]
];

dimensions[13] := [
[ 0, 1, 3, 5, 7, 11, 15, 19 ],
[ 1, 4, 12, 22, 34, 52, 72, 94 ],
[ 1, 12, 34, 66, 108, 162, 226, 300 ],
[ 2, 15, 43, 83, 135, 203, 283, 375 ],
[ 3, 20, 56, 108, 176, 264, 368, 488 ]
];

dimensions[41] := [
[ 1, 7, 18, 34, 55, 82, 114, 151 ],
[ 6, 55, 151, 295, 487, 727, 1015, 1351 ],
[ 8, 62, 169, 329, 542, 809, 1129, 1502 ],
[ 23, 216, 600, 1176, 1944, 2904, 4056, 5400 ],
[ 27, 220, 604, 1180, 1948, 2908, 4060, 5404 ]
];

dimensions[37] := [
[ 1, 4, 12, 22, 34, 52, 72, 94 ],
[ 4, 19, 55, 105, 169, 255, 355, 469 ],
[ 7, 60, 168, 328, 540, 808, 1128, 1500 ],
[ 10, 75, 211, 411, 675, 1011, 1411, 1875 ],
[ 13, 98, 274, 534, 878, 1314, 1834, 2438 ]
];

dimensions[12] := [
[ 0, 2, 4, 6, 8, 12, 16, 20 ],
[ 0, 6, 14, 26, 42, 62, 86, 114 ],
[ 1, 10, 27, 51, 82, 123, 171, 226 ],
[ 1, 19, 51, 99, 163, 243, 339, 451 ],
[ 4, 22, 58, 110, 178, 266, 370, 490 ]
];

dimensions[21] := [
[ 0, 3, 6, 10, 15, 22, 30, 39 ],
[ 2, 10, 24, 44, 70, 104, 144, 190 ],
[ 2, 18, 52, 100, 162, 244, 340, 450 ],
[ 5, 33, 87, 167, 273, 407, 567, 753 ],
[ 6, 56, 152, 296, 488, 728, 1016, 1352 ]
];




weights := [2..16 by 2];
levels := [1..5];
Z<T> := PowerSeriesRing(Integers());

printf "Testing the computation of the HilberSeriesCusp...D=";

function check(d)
    printf "%o ", d;
    F := QuadraticField(d);
    ZF := Integers(F);
    prec := 1;
    R := GradedRingOfHMFs(F, prec);

    function dim_row(level)
      PS<T> := PowerSeriesRing(Integers() : Precision:=30);
      HC := HilberSeriesCusp(R, level*ZF);
      return [AbsEltseq(PS!HC)[k+1] : k in weights];
    end function;
    assert dimensions[d] eq [dim_row(n) : n in levels];
    return true;
end function;

ds := [];
t := Time();
for counter in [1..10] do
    if Set(ds) eq Keys(dimensions) then
        break;
    end if;
    d := Random(Keys(dimensions));
    while d in ds do
        d := Random(Keys(dimensions));
    end while;
    Append(~ds, d);
    _ := check(d);
end for;
